package nowcoder.fairy;

/**
 * 计算整数1-n中整数x（x!=0）出现的次数
 * Author:gagayu
 * Created:2019/3/23
 */

/*
以 n=2593,X=5 为例来解释如何得到数学公式。从 1 至 2593 中，数字 5 总计出现了 813 次，其中有 259 次出现在个位，260 次出现在十位，294 次出现在百位，0 次出现在千位。

现在依次分析这些数据，首先是个位。从 1 至 2590 中，包含了 259 个 10，因此任意的 X 都出现了 259 次。
最后剩余的三个数 2591, 2592 和 2593，因为它们最大的个位数字 3 < X，因此不会包含任何 5。
（也可以这么看，3<X，则个位上可能出现的X的次数仅由更高位决定，等于更高位数字（259）X101-1=259）。

然后是十位。从 1 至 2500 中，包含了 25 个 100，因此任意的 X 都出现了 25×10=250 次。
剩下的数字是从 2501 至 2593，它们最大的十位数字 9 > X，因此会包含全部 10 个 5。最后总计 250 + 10 = 260。
（也可以这么看，9>X，则十位上可能出现的X的次数仅由更高位决定，等于更高位数字（25+1）X102-1=260）。

接下来是百位。从 1 至 2000 中，包含了 2 个 1000，因此任意的 X 都出现了 2×100=200 次。
剩下的数字是从 2001 至 2593，它们最大的百位数字 5 == X，这时情况就略微复杂，它们的百位肯定是包含 5 的，但不会包含全部 100 个。
如果把百位是 5 的数字列出来，是从 2500 至 2593，数字的个数与百位和十位数字相关，是 93+1 = 94。最后总计 200 + 94 = 294。
（也可以这么看，5==X，则百位上可能出现X的次数不仅受更高位影响，还受低位影响，等于更高位数字（2）X103-1+（93+1）=294）。

最后是千位。现在已经没有更高位，因此直接看最大的千位数字 2 < X，所以不会包含任何 5。
（也可以这么看，2<X，则千位上可能出现的X的次数仅由更高位决定，等于更高位数字（0）X104-1=0）。
 */
public class Test7 {

    public static void main(String[] args) {
        Test7 test7=new Test7();
        int res=test7.NumberOf1Between1AndN_Solution(2593,5);
        System.out.println(res);
    }

    public int NumberOf1Between1AndN_Solution(int n,int x) {
        if(n<0){
            return -1;
        }
        int high,tmp,curr,low,i=1;
        high=n;
        int total=0;
        while(high!=0){
            high=n/(int)Math.pow(10,i);
            tmp=n%(int)Math.pow(10,i);
            curr=tmp/(int)Math.pow(10,i-1);
            low=tmp%(int)Math.pow(10,i-1);
            if(curr==x){
                total+=high*(int)Math.pow(10,i-1)+low+1;
            }else if(curr>x){
                total+=(high+1)*(int)Math.pow(10,i-1);
            }else{
                total+=high*(int)Math.pow(10,i-1);
            }
            i++;

        }
        return total;
    }
}
