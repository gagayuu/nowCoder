package nowcoder.fairy;

import java.util.ArrayList;

/**
 * 输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序-p0
 * Author:gagayu
 * Created:2019/4/1
 */

/*
方法一：分根据等差数列求和公式得到n的范围，分n为奇数和偶数的情况，计算得出序列的第一个数字（sum/n-（n-1）/2），+1就是下一个数字。

方法二：双指针技术，相当于一个动态窗口，窗口左边和右边为两个指针，我们根据窗口内值之和来确定窗口的位置和宽度

 */
public class Test22 {


    public static ArrayList<ArrayList<Integer>> FindContinuousSequence(int sum) {

        //方法一：
//        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
//
//        for (int n = (int) Math.sqrt(sum * 2); n >= 2; n--) {
//            if (((n & 1) == 1 && sum % n == 0 )|| (sum % n) * 2 == n) {
//
//                ArrayList<Integer> list = new ArrayList<>();
//                for (int i = (sum /n) - (n - 1) / 2, j = 0; j < n; i++, j++) {
//                    list.add(i);
//                }
//                res.add(list);
//            }
//        }
//
//        return res;


        //方法二：

        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        int low = 1, high = 2;

        while (low < high) {
            int cur = (low + high) * (high - low + 1) / 2;
            if (cur == sum) {
                ArrayList<Integer> list = new ArrayList<>();
                for (int i = low; i <= high; i++) {
                    list.add(i);
                }

                res.add(list);
                low++;
            } else if (cur < sum) {
                high++;
            } else {
                low++;
            }

        }
        return res;
    }

    public static void main(String[] args) {
        ArrayList<ArrayList<Integer>> arrayLists = FindContinuousSequence(100);
        print(arrayLists);
    }

    private static void print(ArrayList<ArrayList<Integer>> arrayLists) {
        for (ArrayList i : arrayLists) {
            System.out.println(i);
        }
    }
}
