package nowcoder.fairy;

/**
 * 一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。
 * Author:gagayu
 * Created:2019/3/27
 */
public class Test16 {
    public void FindNumsAppearOnce(int [] array,int num1[] , int num2[]) {
        int len=array.length;
        if(len==0||len<1){
            num1[0]=num2[0]=0;
            return ;
        }
        if(len==2){
            num1[0]=array[0];
            num2[0]=array[1];
            return ;
        }

        //相同数字异或为0，所以所有元素异或后的结果就是两个只出现一次的元素异或的结果
        //异或满足结合律，交换律
        int res=0;
        for(int i=0;i<len;i++){
            res^=array[i];
        }

        //找到异或的结果中首位为1的那一位，进行分组
        //相同数字二进制每一位都相同，必定在同一组。
        //分组异或，剩下的就是只出现一次的两个数字
       int index= FindBitIs1(res);

        for(int i=0;i<len;i++){
            if(isBit1(array[i],index)){
                num1[0]^=array[i];
            }else{
                num2[0]^=array[i];
            }
        }
    }

    //判断数组元素相应位是不是1
    private boolean isBit1(int i,int index) {

        return ((i>>index) & 1) ==1;
    }

    //每一位&1，结果为0就右移，直到结果为1
    private int FindBitIs1(int res) {
        int index=0;
        while((res & 1 )==0 && index < 32){
            res>>=1;
            index++;
        }
        return index;
    }

    public static void main(String[] args) {
        Test16 t=new Test16();
        int[] a=new int[]{2,3,7,9,2,8,5,8,7,9,34,34};
        int[] n1=new int[1];
        int[] n2=new int[1];
        t.FindNumsAppearOnce(a,n1,n2);
        for(int i=0;i<n1.length;i++){
            System.out.print(n1[i]);

        }
        System.out.println();
        for(int i=0;i<n2.length;i++){
            System.out.print(n2[i]);
        }


    }
}
