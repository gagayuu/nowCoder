/*
有一个整数数组，请你根据快速排序的思路，找出数组中第K大的数。

给定一个整数数组a,同时给定它的大小n和要找的K(K在1到n之间)，请返回第K大的数，保证答案存在。

测试样例：
[1,3,5,2,2],5,3
返回：2

*/


import java.util.*;

public class Finder {
    public int findKth(int[] a, int n, int K) {
        return findKthCore(a,0,n-1,K);
    }
    public int findKthCore(int [] a,int left,int right,int K){
        int pivot=partition(a,left,right);
        if(pivot-left+1==K){
            return a[pivot];
        }else if(pivot-left+1<K){
            return findKthCore(a,pivot+1,right,K-pivot+left-1);
        }else{
            return findKthCore(a,left,pivot-1,K);
        }
    }

    public int partition(int [] a,int left,int right){
        int begin=left;
        int end=right;
        int pivot=a[end];
        while(begin<end){
            while(begin<end && a[begin]>=pivot){
                begin++;
            }
            a[end]=a[begin];
            while(begin<end && a[end]<=pivot){
                end--;
            }
            a[begin]=a[end];
        }
        a[begin]=pivot;
        return begin;
    }
}
