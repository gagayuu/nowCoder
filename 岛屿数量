给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1
示例 2:

输入:
11000
11000
00100
00011

输出: 3

class Solution {
    public int numIslands(char[][] grid) {
        if(grid.length==0){
          return 0;
      }  
        int rows=grid.length;
        int cols=grid[0].length;
        int count=0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]=='1'){
                    count++;
                    bfs(i,j,rows,cols,grid);
                }
            }
        }
       return count;
    }
    public void bfs(int i,int j,int rows,int cols,char[][] grid){
        if(i<0 || i>=rows){
            return ;
        }
        if(j<0 || j>=cols){
            return;
        }
        if(grid[i][j]=='1'){
            grid[i][j]='0';
            bfs(i,j+1,rows,cols,grid);
            bfs(i+1,j,rows,cols,grid);
            bfs(i-1,j,rows,cols,grid);
            bfs(i,j-1,rows,cols,grid);


        }
    }
}
