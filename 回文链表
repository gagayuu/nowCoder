
对于一个链表，请设计一个时间复杂度为O(n),额外空间复杂度为O(1)的算法，判断其是否为回文结构。

给定一个链表的头指针A，请返回一个bool值，代表其是否为回文结构。保证链表长度小于等于900。


import java.util.*;

/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/
public class PalindromeList {
   public boolean chkPalindrome(ListNode A) {

        if(A==null){
            return true;
        }
        if(A.next==null){
            return true;
        }
        int halfLen=listLength(A);
        ListNode cur=A;

        for(int i=0;i<halfLen;i++){

            cur=cur.next;

        }

        ListNode r= reverse(cur);
        ListNode y=A;

        while(y!=null && r!=null){
            if(y.val!=r.val){
                return false;
            }
            y=y.next;
            r=r.next;
        }

        return true ;
    }

    public int listLength(ListNode head){
        if(head==null){
            return -1;
        }
        ListNode cur=head;
        int len=0;
        while(cur!=null){
            len++;
            cur=cur.next;
        }
        int halfLen=len/2;
        return halfLen;
    }

    public ListNode reverse(ListNode head){
        ListNode cur=head;
        ListNode res=null;
        while(cur!=null){
            ListNode next=cur.next;

            cur.next=res;
            res=cur;
            cur=next;

        }
        return res;

    }
}
