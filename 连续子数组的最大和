package nowcoder.fairy;

/**
 *连续子数组的最大和：
 *{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。
 * 给一个数组，返回它的最大连续子序列的和，(子向量的长度至少是1)
 * Author:gagayu
 * Created:2019/3/20
 */

/**
 * 分析：DP：
 * F[i]：以array[i]为末尾元素的子数组的和的最大值，子数组的元素的相对位置不变
 * F(0)=array[0]，res=array[0];
 * F(1)=max(F[0]+array[1],F[0])，res=max(F[0],F[1]);
 * F(2)=max(F[1]+array[2],F[1]),res=max(res,F[2]);
 * F(3)=max(F[2]+array[3],F[2]),res=max(res,F[3]);
 * ...依次类推，
 * 将数组第一个值记录到一个变量中，比较（第一个值+下一个数组元素）与 第一个值，
 * 即不断比较 当前值 与（当前值+下一个数组元素），记为max。设置变量记录res，再次比较res与max
 * 最后返回res就是最大子数组和
 *
 */
public class Test5 {
    public int FindGreatestSumOfSubArray(int[] array) {
        int max=array[0];//包括当前子数组和连续子数组的最大值
        int res=array[0];//当前所有连续子数组和，子数组和中的最大值
        for(int i=1;i<array.length;i++){
            max=Math.max(max+array[i],array[i]);
            res=Math.max(max,res);
        }
        return res;
    }

    public static void main(String[] args) {
        Test5 test5=new Test5();
        int [] array=new int[]{6,-3,-2,7,-15,1,2,2};
        int res=test5.FindGreatestSumOfSubArray(array);
        System.out.println(res);

    }
}

